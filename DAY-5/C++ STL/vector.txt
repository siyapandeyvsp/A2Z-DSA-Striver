// Online C++ compiler to run C++ program online
#include <iostream>
#include <vector>
using namespace std;
int main() {
//vector stores dynamic array
vector <int> v;
v.push_back(1);
v.emplace_back(2);
v.emplace_back(5);
v.emplace_back(6);
v.emplace_back(20);//dyynamically increasese size faster
vector <pair <int,int>>vec;
vec.push_back({1,2});
vec.emplace_back(1,2);

vector <int> v2(5,100);//container containing 5 instances of 100

vector <int> v3(5);//container of size 5 with 5 instances of 0 or garbage values

vector <int> v4(5,20);

vector <int> v5(v);//copy container

//even if u push_back again dynamically increase

//access methods
cout<<v[1];//like array

//using iterators
vector <int>::iterator it = v.begin();
//points to memory and not element
it++;
cout << *(it) << " ";
//vector <int> :: it = v.end();
//points to 1 position after the last element
//vector <int> :: it = v.rend();
//vector <int> :: it = v.rbegin();
cout << v[0] <<" ";
cout<< v.back()<<endl;
//print using loop
for (vector <int> :: iterator it = v.begin(); it!=v.end();it ++){
    cout << *(it)<<" ";
}
cout<<endl;
 //auto data type
 for (auto it = v.begin();it!=v.end(); it ++){
     cout << * (it)<<" ";
     }
cout<<endl;
for (auto it : v ){
    cout << it << " ";
}
cout<<endl;
//erase single element
v.erase (v.begin()+1);
for (auto it : v ){
    cout << it << " ";
}
cout<<endl;
//erase multiple values
v.erase(v.begin()+2,v.begin()+4);
for (auto it : v ){
    cout << it << " ";
}

//insert function
vector <int> vv(2,100);
for (auto it : v ){
    cout << it << " ";
}
cout<<endl;
vv.insert (vv.begin(),300);
for (auto it : vv ){
    cout << it << " ";
}
cout<<endl;
vv.insert (vv.begin()+1,2,10);//2 occurances of 10
cout<<"Inserted values"<<endl;
for (auto it : vv ){
    cout << it << " ";
}
cout<<endl;
//copy 
vector <int> copy (2,50);
vv.insert(vv.begin(),copy.begin(),copy.end());

//no of elements
cout<<vv.size();
//delete last element
vv.pop_back();

//swap values
v1.swap(v2);
vv.clear();//erases the entire verctor
cout<<vv.empty();//boolean empty or not?
    return 0;
}